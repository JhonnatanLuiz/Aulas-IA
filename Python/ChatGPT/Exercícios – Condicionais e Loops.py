'''
1. Par ou √≠mpar
Pe√ßa ao usu√°rio para digitar um n√∫mero inteiro.
Verifique se ele √© par ou √≠mpar.
Mostre uma mensagem no print().
'''



# Fun√ß√µes e operadores usados:
# input(prompt) -> l√™ texto do usu√°rio (retorna string).
# int(s) -> converte a string s para inteiro (levanta ValueError se inv√°lida).
# operador % -> resto da divis√£o inteira (ex.: 5 % 2 == 1).
# operador == -> compara igualdade (ex.: numero % 2 == 0).
# f-strings -> formatam strings com express√µes: f"O n√∫mero {numero}".
# print() -> imprime no console.

try:
    numero = int(input("Digite um n√∫mero inteiro: "))  # l√™ e converte a entrada
    if numero % 2 == 0:                               # checa resto igual a zero
        print(f"O n√∫mero {numero} √© par.")
    else:
        print(f"O n√∫mero {numero} √© √≠mpar.")
except ValueError:
    # mensagem amig√°vel caso o usu√°rio n√£o digite um inteiro v√°lido
    print("Entrada inv√°lida: por favor digite um n√∫mero inteiro.")


'''
2. Maior de idade
Pe√ßa a idade do usu√°rio (input).
Se for maior ou igual a 18, mostre "Voc√™ √© maior de idade".
Caso contr√°rio, mostre "Voc√™ √© menor de idade".
'''

# Explica√ß√£o das fun√ß√µes usadas neste exerc√≠cio:
# - input(prompt): l√™ texto do usu√°rio.
# - int(s): converte string em inteiro; envolvemos em try/except para tratar entradas inv√°lidas.
# - operador >= : compara valores (ex.: idade >= 18).
# - print(): mostra a sa√≠da formatada para o usu√°rio.

try:
    idade = int(input("Digite sua idade: "))
    if idade >= 18:
        print("Voc√™ √© maior de idade.")
    else:
        print("Voc√™ √© menor de idade.")
except ValueError:
    # trata caso o usu√°rio digite algo que n√£o possa ser convertido para inteiro
    print("Entrada inv√°lida: por favor digite um n√∫mero inteiro.")
    
    
'''
3. Tabuada

Pe√ßa ao usu√°rio um n√∫mero.

Mostre a tabuada desse n√∫mero de 1 a 10, usando um for.
'''
try:
    # input(prompt) -> l√™ texto do usu√°rio (retorna string)
    # int(s) -> converte a string s para inteiro (levanta ValueError se inv√°lida)
    # range(1, 11) -> gera os n√∫meros de 1 at√© 10 (11 n√£o inclu√≠do)
    # for i in range(...): -> repete o bloco para cada valor de i
    # f-strings -> formata√ß√£o embutida: f"{numero} x {i} = {numero * i}"
    # print() -> imprime cada linha da tabuada no console
    numero = int(input("Digite um n√∫mero para ver a tabuada: "))
    for i in range(1, 11):
        print(f"{numero} x {i} = {numero * i}")
except ValueError:
    # trata caso o usu√°rio digite algo que n√£o seja um inteiro
    print("Entrada inv√°lida: por favor digite um n√∫mero inteiro.")
    
'''
4. Contagem regressiva

Use um while para fazer uma contagem regressiva de 10 at√© 0.

Ao final, mostre "üöÄ Decolar!".
'''
contador = 10  # vari√°vel que guarda o valor atual da contagem

# while condi√ß√£o: repete o bloco enquanto a condi√ß√£o for True
# aqui: enquanto contador for maior ou igual a 0
while contador >= 0:
    # print(value) -> mostra value no console
    print(contador)
    # operador -= : decrementa o valor da vari√°vel em 1 (contador = contador - 1)
    contador -= 1

# Ap√≥s o while terminar (quando contador < 0), executa o pr√≥ximo print
print("üöÄ Decolar!")

# Dicas opcionais:
# - Para ver a contagem com intervalo de 1 segundo, importe time e use time.sleep(1) dentro do while.
# - Cuidado: garanta que a condi√ß√£o possa se tornar False (aqui contador diminui), ou o loop ser√° infinito.

'''
5. Soma de n√∫meros (com explica√ß√µes em coment√°rios)
'''

soma = 0  # acumula a soma dos n√∫meros digitados

# while True -> loop infinito at√© encontrarmos um 'break' (√∫til quando n√£o sabemos quantas itera√ß√µes)
while True:
    try:
        # input(prompt) -> l√™ texto do usu√°rio (retorna string)
        # int(s) -> converte a string s para inteiro; se n√£o for inteiro, levanta ValueError
        numero = int(input("Digite um n√∫mero (0 para sair): "))

        # sentinel: se o usu√°rio digitar 0, interrompemos o loop com break
        if numero == 0:
            break  # sai do while

        # operador += -> soma o valor √† vari√°vel soma (soma = soma + numero)
        soma += numero

    except ValueError:
        # captura entradas inv√°lidas (ex.: "abc") e informa o usu√°rio sem encerrar o programa
        print("Entrada inv√°lida: por favor digite um n√∫mero inteiro.")

# f-strings -> formata a sa√≠da de forma leg√≠vel: {soma} √© substitu√≠do pelo valor de soma
print(f"A soma dos n√∫meros digitados √©: {soma}")

'''üîπ 6. Jogo de Adivinha√ß√£o

O computador escolhe um n√∫mero aleat√≥rio de 1 a 100.

O usu√°rio deve tentar adivinhar.

O programa deve dar dicas: ‚Äúmaior‚Äù ou ‚Äúmenor‚Äù.

Ao acertar, mostrar quantas tentativas foram usadas.

üëâ Dica: use import random e random.randint(1, 100).
'''
import random  # m√≥dulo para gerar n√∫meros aleat√≥rios

# random.randint(a, b) -> inteiro aleat√≥rio entre a e b (inclusive)
numero_secreto = random.randint(1, 100)
tentativas = 0  # contador de tentativas

# Loop principal do jogo (termina com 'break')
while True:
    # input(prompt) -> l√™ texto; strip() remove espa√ßos nas pontas
    s = input("Digite seu palpite (1-100) ou 'sair' para encerrar: ").strip()
    if s.lower() == 'sair':
        print("Jogo encerrado.")
        break

    # Valida√ß√£o: garantir que √© inteiro
    try:
        palpite = int(s)  # int(s) pode levantar ValueError
    except ValueError:
        print("Entrada inv√°lida: digite um n√∫mero inteiro entre 1 e 100.")
        continue  # volta ao in√≠cio do while

    # Checar intervalo permitido
    if not (1 <= palpite <= 100):
        print("Informe um n√∫mero entre 1 e 100.")
        continue

    tentativas += 1  # somar 1 tentativa (operador +=)

    # Dicas e acerto
    if palpite == numero_secreto:
        print(f"Voc√™ acertou! O n√∫mero era {numero_secreto}.")
        print(f"Voc√™ usou {tentativas} tentativas.")
        break  # sai do loop ao acertar
    elif palpite < numero_secreto:
        print("Maior...")  # dica: pense em um n√∫mero maior
    else:
        print("Menor...")  # dica: pense em um n√∫mero menor
        
    '''
    7. Calculadora Simples
    Mostre um menu com as opera√ß√µes: soma, subtra√ß√£o, multiplica√ß√£o, divis√£o.
    O usu√°rio escolhe a opera√ß√£o digitando um n√∫mero.
    Depois, digita dois valores.
    O programa mostra o resultado.
    Perguntar se deseja fazer outro c√°lculo (se ‚Äún√£o‚Äù, encerrar).
    '''
    
def exercicio7_calculadora():
    """
    Calculadora interativa:
    - Mostra menu de opera√ß√µes
    - L√™ a escolha do usu√°rio e dois n√∫meros
    - Realiza a opera√ß√£o e pergunta se quer continuar
    """

    while True:
        # print(...) -> mostra texto no console
        print("Escolha uma opera√ß√£o:")
        print("1. Soma")
        print("2. Subtra√ß√£o")
        print("3. Multiplica√ß√£o")
        print("4. Divis√£o")

        # input(prompt) -> l√™ texto do usu√°rio (string)
        operacao = input("Digite o n√∫mero da opera√ß√£o desejada: ").strip()

        # valida√ß√£o simples da op√ß√£o escolhida
        if operacao not in ['1', '2', '3', '4']:
            print("Opera√ß√£o inv√°lida. Tente novamente.")
            continue  # volta ao in√≠cio do while

        # L√™ os dois n√∫meros com valida√ß√£o
        try:
            # float(s) -> converte string para n√∫mero decimal (aceita inteiros e decimais)
            num1 = float(input("Digite o primeiro n√∫mero: "))
            num2 = float(input("Digite o segundo n√∫mero: "))
        except ValueError:
            # trata entradas n√£o num√©ricas
            print("Entrada inv√°lida. Por favor, digite n√∫meros.")
            continue

        # Realiza a opera√ß√£o escolhida
        if operacao == '1':
            resultado = num1 + num2
            print(f"Resultado da soma: {resultado}")
        elif operacao == '2':
            resultado = num1 - num2
            print(f"Resultado da subtra√ß√£o: {resultado}")
        elif operacao == '3':
            resultado = num1 * num2
            print(f"Resultado da multiplica√ß√£o: {resultado}")
        elif operacao == '4':
            # checagem para evitar divis√£o por zero
            if num2 == 0:
                print("Erro: Divis√£o por zero n√£o √© permitida.")
            else:
                resultado = num1 / num2
                print(f"Resultado da divis√£o: {resultado}")

        # Pergunta se deseja fazer outro c√°lculo
        # .strip() remove espa√ßos; .lower() normaliza para compara√ß√£o
        continuar = input("Deseja fazer outro c√°lculo? (sim/n√£o): ").strip().lower()
        if continuar != 'sim':
            print("Encerrando a calculadora.")
            break  # sai do loop e encerra a fun√ß√£o

# Chame a fun√ß√£o quando quiser executar apenas a calculadora:
# exercicio7_calculadora()

'''
8. Gerador de Senhas

O usu√°rio informa o tamanho da senha (n√∫mero de caracteres).

O programa gera uma senha aleat√≥ria misturando letras, n√∫meros e s√≠mbolos.

üëâ Dica: use import string e import random com:
caracteres = string.ascii_letters + string.digits + string.punctuation
senha = "".join(random.choice(caracteres) for _ in range(tamanho))
'''

import string
import random


def exercicio8_gerador_senha():
    """Gera uma senha aleat√≥ria com letras, d√≠gitos e s√≠mbolos.

    O usu√°rio informa o tamanho (inteiro). Aceita 'sair' para cancelar.
    Usa string.ascii_letters, string.digits, string.punctuation e random.choice.
    """
    caracteres = string.ascii_letters + string.digits + string.punctuation
    max_len = 256

    while True:
        s = input(f"Digite o tamanho da senha (1-{max_len}) ou 'sair' para cancelar: ").strip()
        if s.lower() == 'sair':
            print("Opera√ß√£o cancelada.")
            return
        try:
            tamanho = int(s)
            if 1 <= tamanho <= max_len:
                break
            else:
                print(f"Informe um n√∫mero entre 1 e {max_len}.")
        except ValueError:
            print("Entrada inv√°lida: digite um n√∫mero inteiro.")

    # random.choice(seq) -> escolhe um elemento aleat√≥rio da sequ√™ncia
    # ''.join(...) -> concatena os caracteres gerados em uma √∫nica string
    senha = ''.join(random.choice(caracteres) for _ in range(tamanho))
    print(f"Senha gerada: {senha}")


# Executa o exerc√≠cio 8 quando o arquivo for rodado interativamente
# exercicio8_gerador_senha()

'''
9. Agenda de Contatos (CRUD b√°sico)

Adicionar contato (nome e telefone)
Listar todos os contatos
Buscar contato pelo nome
Remover contato
Encerrar o programa
'''

def exercicio9_agenda_contatos():
    """
    Agenda de Contatos (CRUD b√°sico):
    - Adicionar contato (nome e telefone)
    - Listar todos os contatos
    - Buscar contato pelo nome
    - Remover contato
    - Encerrar o programa
    """
    # DICION√ÅRIO: estrutura que armazena pares chave-valor
    # Aqui usamos o nome como chave e telefone como valor
    # Sintaxe: dicionario = {"chave": "valor"}
    contatos = {}  # Come√ßamos com dicion√°rio vazio

    # LOOP WHILE INFINITO: executa enquanto a condi√ß√£o for True
    # while True: significa "execute para sempre at√© encontrar um break"
    while True:
        # PRINT: mostra texto na tela do usu√°rio
        print("\n=== AGENDA DE CONTATOS ===")
        print("1. Adicionar contato")
        print("2. Listar contatos")
        print("3. Buscar contato")
        print("4. Remover contato")
        print("5. Encerrar")

        # TRY/EXCEPT: tratamento de erros
        # Tenta executar o c√≥digo dentro do try
        # Se der erro ValueError (usu√°rio digitou texto em vez de n√∫mero), executa except
        try:
            # INPUT: l√™ entrada do usu√°rio (sempre retorna string)
            # INT(): converte string para n√∫mero inteiro
            opcao = int(input("Escolha uma op√ß√£o (1-5): "))
        except ValueError:
            # Se usu√°rio digitou algo que n√£o √© n√∫mero, mostra mensagem e continua
            print("Entrada inv√°lida: digite um n√∫mero entre 1 e 5.")
            continue  # Volta ao in√≠cio do while

        # CONDICIONAIS IF/ELIF/ELSE: executa c√≥digo baseado em condi√ß√µes
        if opcao == 1:  # Adicionar contato
            # STRIP(): remove espa√ßos em branco do in√≠cio e fim da string
            nome = input("Digite o nome do contato: ").strip()

            # VALIDA√á√ÉO: verifica se entrada est√° correta
            if not nome:  # String vazia √© considerada "falsa" em Python
                print("Nome n√£o pode ser vazio.")
                continue  # Volta ao in√≠cio do while

            # VERIFICA√á√ÉO EM DICION√ÅRIO: operador 'in' verifica se chave existe
            if nome in contatos:
                print(f"Contato '{nome}' j√° existe.")
                continue

            telefone = input("Digite o telefone: ").strip()
            if not telefone:
                print("Telefone n√£o pode ser vazio.")
                continue

            # ATRIBUI√á√ÉO EM DICION√ÅRIO: adiciona novo par chave-valor
            contatos[nome] = telefone
            print(f"Contato '{nome}' adicionado com sucesso! Telefone: {telefone}")

        elif opcao == 2:  # Listar contatos
            # VERIFICA√á√ÉO SE DICION√ÅRIO EST√Å VAZIO
            if not contatos:  # Dicion√°rio vazio √© "falso"
                print("Nenhum contato cadastrado.")
            else:
                print("\n--- LISTA DE CONTATOS ---")
                # LOOP FOR: itera sobre itens do dicion√°rio
                # .items() retorna pares (chave, valor)
                for nome, telefone in contatos.items():
                    # F-STRING: formata√ß√£o de string com vari√°veis
                    print(f"Nome: {nome} | Telefone: {telefone}")

        elif opcao == 3:  # Buscar contato
            nome_busca = input("Digite o nome para buscar: ").strip()
            if nome_busca in contatos:
                # ACESSO A VALOR DO DICION√ÅRIO: dicionario[chave]
                print(f"Nome: {nome_busca} | Telefone: {contatos[nome_busca]}")
            else:
                print(f"Contato '{nome_busca}' n√£o encontrado.")

        elif opcao == 4:  # Remover contato
            nome_remover = input("Digite o nome para remover: ").strip()
            if nome_remover in contatos:
                # DEL: remove item do dicion√°rio
                del contatos[nome_remover]
                print(f"Contato '{nome_remover}' removido com sucesso!")
            else:
                print(f"Contato '{nome_remover}' n√£o encontrado.")

        elif opcao == 5:  # Encerrar
            print("Encerrando a agenda de contatos...")
            break  # Sai do loop while

        else:
            print("Op√ß√£o inv√°lida. Escolha entre 1 e 5.")


# Executa o exerc√≠cio 9 quando o arquivo for rodado interativamente
# exercicio9_agenda_contatos()

'''
10. Jogo da Forca

O usu√°rio deve adivinhar a palavra secreta, letra por letra.

Mostre o progresso com underscores (_).

Limite de 6 tentativas erradas.

Ao final, mostre uma mensagem de vit√≥ria ou derrota.
'''

def exercicio10_jogo_forca():
    """
    Jogo da Forca:
    - Escolhe palavra secreta aleatoriamente
    - Jogador adivinha letra por letra
    - Mostra progresso com underscores
    - M√°ximo 6 tentativas erradas
    - Mostra resultado final
    """
    # IMPORT: carrega m√≥dulos externos do Python
    # random: m√≥dulo para gerar n√∫meros/choices aleat√≥rios
    import random

    # LISTA: estrutura que armazena m√∫ltiplos valores em sequ√™ncia
    # Sintaxe: lista = ["item1", "item2", "item3"]
    palavras = [
        "python", "programacao", "computador", "algoritmo", "desenvolvimento",
        "tecnologia", "internet", "software", "hardware", "dados",
        "inteligencia", "artificial", "aprendizado", "maquina", "rede",
        "seguranca", "criptografia", "banco", "sistema", "aplicacao"
    ]

    # RANDOM.CHOICE(): escolhe um item aleat√≥rio da lista
    palavra_secreta = random.choice(palavras).upper()

    # LIST COMPREHENSION: cria lista de forma concisa
    # ["_"] * len(palavra_secreta) cria lista com tantos "_" quanto o tamanho da palavra
    letras_descobertas = ["_"] * len(palavra_secreta)

    # SET: estrutura que armazena valores √∫nicos (sem duplicatas)
    # Sintaxe: conjunto = set() ou conjunto = {"item1", "item2"}
    letras_tentadas = set()  # Come√ßa vazio

    # VARI√ÅVEIS NUM√âRICAS: armazenam n√∫meros inteiros
    tentativas_erradas = 0
    max_tentativas = 6

    print("\n=== JOGO DA FORCA ===")
    # LEN(): retorna o tamanho/comprimento de uma string/lista
    print(f"A palavra tem {len(palavra_secreta)} letras.")
    print("Tente adivinhar letra por letra!")
    print("Voc√™ tem 6 tentativas erradas.")

    # LOOP WHILE COM CONDI√á√ÉO: executa enquanto condi√ß√£o for verdadeira
    while tentativas_erradas < max_tentativas:
        # MOSTRA ESTADO ATUAL DO JOGO
        print(f"\nPalavra: {' '.join(letras_descobertas)}")
        # CONDICIONAL INLINE: if/else em uma linha
        # sorted(): ordena os itens do set em ordem alfab√©tica
        print(f"Letras tentadas: {', '.join(sorted(letras_tentadas)) if letras_tentadas else 'Nenhuma'}")
        print(f"Tentativas restantes: {max_tentativas - tentativas_erradas}")

        # VERIFICA SE GANHOU: operador 'not in' verifica aus√™ncia
        if "_" not in letras_descobertas:
            print("\nüéâ PARAB√âNS! Voc√™ ganhou!")
            print(f"A palavra era: {palavra_secreta}")
            print(f"Tentativas erradas: {tentativas_erradas}")
            return  # Sai da fun√ß√£o

        # LOOP INTERNO PARA VALIDA√á√ÉO DA LETRA
        while True:
            letra = input("Digite uma letra: ").strip().upper()

            # LEN(): verifica comprimento da string
            if len(letra) != 1:
                print("Digite apenas uma letra!")
                continue  # Volta ao in√≠cio do while interno

            # ISALPHA(): verifica se √© letra (n√£o n√∫mero ou s√≠mbolo)
            if not letra.isalpha():
                print("Digite apenas letras!")
                continue

            # VERIFICA√á√ÉO EM SET: operador 'in' funciona com sets
            if letra in letras_tentadas:
                print(f"Voc√™ j√° tentou a letra '{letra}'!")
                continue

            break  # Sai do loop de valida√ß√£o

        # ADI√á√ÉO A SET: .add() adiciona item ao conjunto
        letras_tentadas.add(letra)

        # VERIFICA SE LETRA EST√Å NA PALAVRA
        if letra in palavra_secreta:
            print(f"‚úÖ Boa! A letra '{letra}' est√° na palavra!")

            # LOOP FOR COM ENUMERATE: itera com √≠ndice e valor
            # enumerate() retorna (√≠ndice, caractere) para cada posi√ß√£o
            for i, char in enumerate(palavra_secreta):
                if char == letra:
                    # ATRIBUI√á√ÉO POR √çNDICE: lista[√≠ndice] = novo_valor
                    letras_descobertas[i] = letra
        else:
            # OPERADOR += : incrementa vari√°vel (equivalente a tentativas_erradas = tentativas_erradas + 1)
            tentativas_erradas += 1
            print(f"‚ùå A letra '{letra}' n√£o est√° na palavra!")
            if tentativas_erradas < max_tentativas:
                print(f"Tentativas erradas: {tentativas_erradas}/{max_tentativas}")

    # SE CHEGOU AQUI, PERDEU (atingiu m√°ximo de tentativas)
    print("\nüíÄ GAME OVER! Voc√™ perdeu!")
    print(f"A palavra era: {palavra_secreta}")
    print(f"Tentativas erradas: {tentativas_erradas}/{max_tentativas}")


# Executa o exerc√≠cio 10 quando o arquivo for rodado interativamente
# exercicio10_jogo_forca()

'''
üîπ 11. Conversor de Moedas

Crie um programa que:

Pergunta um valor em reais (R$).

Mostra o equivalente em:

D√≥lar (taxa fixa, ex: 1 USD = 5,00 BRL)

Euro (taxa fixa, ex: 1 EUR = 5,50 BRL)

Peso Argentino (taxa fixa, ex: 1 ARS = 0,025 BRL)

Ap√≥s cada convers√£o, perguntar se o usu√°rio quer fazer outra.

üëâ Dicas:

Armazene as taxas em um dicion√°rio, ex:

taxas = {"USD": 5.0, "EUR": 5.5, "ARS": 0.025}


F√≥rmula: valor / taxa
'''

def exercicio11_conversor_moedas():
    """
    Conversor de Moedas:
    - Converte valor em reais para USD, EUR e ARS
    - Usa taxas fixas armazenadas em dicion√°rio
    - Permite m√∫ltiplas convers√µes em loop
    """
    # DICION√ÅRIOS: armazenam taxas de c√¢mbio
    # Sintaxe: {"chave": valor}
    # Aqui: 1 unidade estrangeira = X reais
    taxas = {
        "USD": 5.0,    # 1 D√≥lar Americano = 5,00 Reais
        "EUR": 5.5,    # 1 Euro = 5,50 Reais
        "ARS": 0.025   # 1 Peso Argentino = 0,025 Reais
    }

    # DICION√ÅRIO PARA NOMES COMPLETOS das moedas
    nomes_moedas = {
        "USD": "D√≥lar Americano",
        "EUR": "Euro",
        "ARS": "Peso Argentino"
    }

    print("\n=== CONVERSOR DE MOEDAS ===")
    print("Converte valores de Real (BRL) para outras moedas")
    print("Taxas fixas atualizadas")

    # LOOP WHILE INFINITO: executa at√© usu√°rio escolher sair
    while True:
        # LOOP INTERNO PARA VALIDA√á√ÉO DO VALOR
        while True:
            try:
                # FLOAT(): converte string para n√∫mero decimal
                valor_brl = float(input("\nDigite o valor em reais (R$): ").strip())

                # VALIDA√á√ÉO: verifica se valor n√£o √© negativo
                if valor_brl < 0:
                    print("Valor n√£o pode ser negativo. Tente novamente.")
                    continue  # Volta ao in√≠cio do loop interno

                break  # Sai do loop de valida√ß√£o se tudo estiver OK

            except ValueError:
                # Se usu√°rio digitou texto em vez de n√∫mero
                print("Valor inv√°lido. Digite um n√∫mero (ex: 100.50)")

        # MOSTRA VALOR INFORMADO com formata√ß√£o
        # :.2f significa "2 casas decimais"
        print(f"\nüí∞ Valor informado: R$ {valor_brl:.2f}")
        print("-" * 40)  # Linha separadora

        # LOOP FOR: itera sobre itens do dicion√°rio
        # .items() retorna pares (chave, valor)
        for moeda, taxa in taxas.items():
            # C√ÅLCULO DA CONVERS√ÉO: divide valor em reais pela taxa
            valor_convertido = valor_brl / taxa

            # BUSCA NOME COMPLETO no outro dicion√°rio
            nome_moeda = nomes_moedas[moeda]

            # EXIBE RESULTADO formatado
            print(f"{nome_moeda} ({moeda}): {valor_convertido:.2f}")

        print("-" * 40)  # Linha separadora

        # LOOP PARA PERGUNTAR SE QUER CONTINUAR
        while True:
            # .lower() converte para min√∫sculas para facilitar compara√ß√£o
            resposta = input("Deseja converter outro valor? (s/n): ").strip().lower()

            # LISTA DE RESPOSTAS V√ÅLIDAS PARA "SIM"
            if resposta in ['s', 'sim', 'y', 'yes']:
                break  # Sai do loop interno, continua o loop principal

            # LISTA DE RESPOSTAS V√ÅLIDAS PARA "N√ÉO"
            elif resposta in ['n', 'n√£o', 'nao', 'no']:
                print("Obrigado por usar o conversor de moedas!")
                return  # Sai da fun√ß√£o completamente

            else:
                # Se resposta n√£o foi reconhecida
                print("Responda com 's' para sim ou 'n' para n√£o.")


# Executa o exerc√≠cio 11 quando o arquivo for rodado interativamente
exercicio11_conversor_moedas()

'''
üîπ 12. Calculadora de IMC (√çndice de Massa Corporal)

Crie um programa que:

Pergunta o nome da pessoa.

Pergunta o peso (kg) e a altura (m).

Calcula o IMC = peso / (altura¬≤).

Mostra o resultado com duas casas decimais.

Classifica o IMC conforme a tabela:

Menor que 18.5 ‚Üí Abaixo do peso

Entre 18.5 e 24.9 ‚Üí Peso normal

Entre 25.0 e 29.9 ‚Üí Sobrepeso

Entre 30.0 e 34.9 ‚Üí Obesidade grau I

Entre 35.0 e 39.9 ‚Üí Obesidade grau II

Acima de 40.0 ‚Üí Obesidade grau III

Ap√≥s mostrar o resultado, perguntar se o usu√°rio quer calcular novamente (loop).
'''

from colorama import Fore, Style

def calcular_imc(peso, altura):
    imc = peso / (altura ** 2)
    if imc < 18.5:
        classificacao = Fore.YELLOW + "Abaixo do peso" + Style.RESET_ALL
    elif 18.5 <= imc < 25.0:
        classificacao = Fore.GREEN + "Peso normal" + Style.RESET_ALL
    elif 25.0 <= imc < 30.0:
        classificacao = Fore.YELLOW + "Sobrepeso" + Style.RESET_ALL
    elif 30.0 <= imc < 35.0:
        classificacao = Fore.RED + "Obesidade grau I" + Style.RESET_ALL
    elif 35.0 <= imc < 40.0:
        classificacao = Fore.RED + "Obesidade grau II" + Style.RESET_ALL
    else:
        classificacao = Fore.RED + "Obesidade grau III" + Style.RESET_ALL
    return imc, classificacao


def exercicio12_calculadora_imc():
    """
    Calculadora de IMC (√çndice de Massa Corporal):
    - Pergunta nome, peso e altura
    - Calcula e classifica o IMC
    - Permite m√∫ltiplos c√°lculos em loop
    """
    print("\n=== CALCULADORA DE IMC ===")

    while True:
        # Pergunta nome
        nome = input("Digite seu nome: ").strip()

        # LOOP PARA OBTER PESO V√ÅLIDO
        while True:
            try:
                peso = float(input("Digite seu peso (kg): ").strip())
                if peso <= 0:
                    print("Peso inv√°lido. Digite um peso positivo.")
                    continue
                break
            except ValueError:
                print("Entrada inv√°lida. Digite um n√∫mero.")

        # LOOP PARA OBTER ALTURA V√ÅLIDA
        while True:
            try:
                altura = float(input("Digite sua altura (m): ").strip())
                if altura <= 0:
                    print("Altura inv√°lida. Digite uma altura positiva.")
                    continue
                break
            except ValueError:
                print("Entrada inv√°lida. Digite um n√∫mero.")

        # C√ÅLCULO DO IMC
        imc, classificacao = calcular_imc(peso, altura)

        # MOSTRA RESULTADO
        print(f"\nOl√° {nome}, seu IMC √© {imc:.2f} ({classificacao}).")

        # PERGUNTA SE DESEJA CALCULAR NOVAMENTE
        while True:
            resposta = input("Deseja calcular o IMC de outra pessoa? (s/n): ").strip().lower()
            if resposta in ['s', 'sim', 'y', 'yes']:
                break
            elif resposta in ['n', 'n√£o', 'nao', 'no']:
                print("Obrigado por usar a calculadora de IMC!")
                return
            else:
                print("Responda com 's' para sim ou 'n' para n√£o.")


# Executa o exerc√≠cio 12 quando o arquivo for rodado interativamente
exercicio12_calculadora_imc()