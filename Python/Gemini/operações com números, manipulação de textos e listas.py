# Exerc√≠cio 1: Calculadora de M√©dia
# Objetivo: Praticar o uso de vari√°veis, operadores aritm√©ticos e a formata√ß√£o de strings.
#
# Instru√ß√µes:
#
# Crie tr√™s vari√°veis, nota1, nota2, e nota3, e atribua a elas valores num√©ricos (que podem ser decimais, como 7.5).
#
# Calcule a m√©dia dessas tr√™s notas. A m√©dia √© a soma das notas dividida pelo n√∫mero de notas.
#
# Armazene o resultado em uma vari√°vel chamada media.
#
# Imprima o resultado de forma clara, por exemplo: "As notas foram 7.5, 8.0 e 9.0, e a m√©dia √© 8.17." (Dica: voc√™ pode precisar formatar o n√∫mero de casas decimais).

# IMPORT: carrega m√≥dulos externos do Python
# random: m√≥dulo para gerar n√∫meros aleat√≥rios (usado no Projeto 4)
import random
import json
import os
import re

def ler_nota(posicao: int) -> float:
    """L√™ uma nota do usu√°rio, aceita ',' ou '.', valida e retorna float entre 0 e 10."""
    while True:
        s = input(f"Digite a nota {posicao} (0-10): ").strip()
        # aceita v√≠rgula como separador decimal
        s = s.replace(',', '.')
        try:
            n = float(s)
            if 0 <= n <= 10:
                return n
            else:
                print("Nota inv√°lida: informe um n√∫mero entre 0 e 10.")
        except ValueError:
            print("Entrada inv√°lida: digite um n√∫mero (ex.: 7.5).")

# Ler as tr√™s notas do usu√°rio
nota1 = ler_nota(1)
nota2 = ler_nota(2)
nota3 = ler_nota(3)

media = (nota1 + nota2 + nota3) / 3
print(f"As notas foram {nota1:.1f}, {nota2:.1f} e {nota3:.1f}, e a m√©dia √© {media:.2f}.")

# Verifica√ß√£o de conceito com tr√™s faixas
if media >= 7:
    print("Aprovado!")
elif media >= 5:  # aqui j√° sabemos media < 7 por causa do if anterior
    print("Recupera√ß√£o!")
else:
    print("Reprovado!")

# Exerc√≠cio 2: Criador de E-mail
# Objetivo: Praticar a manipula√ß√£o e concatena√ß√£o de strings.
#
# Instru√ß√µes:
#
# Crie duas vari√°veis, nome e sobrenome, com seus dados ou dados fict√≠cios.
#
# Imagine que o e-mail de um usu√°rio √© sempre a primeira letra do nome, seguida pelo sobrenome, e o dom√≠nio "@empresa.com".
# Ex: para "Ana Silva", o e-mail seria "asilva@empresa.com".
#
# Crie uma vari√°vel email que construa esse endere√ßo de e-mail a partir do nome e sobrenome.
#
# Importante: O e-mail deve estar todo em letras min√∫sculas. (Dica: use .lower()).
#
# Imprima na tela uma mensagem como: "O e-mail para [Nome Completo] √©: [email gerado]".

nome = "Jhonnatan"
sobrenome = "Luiz"

# use um dom√≠nio v√°lido em vez de uma URL
domain = "empresa.com"
email = f"{nome.strip()[0].lower()}{sobrenome.strip().lower()}@{domain}"

print(f"O e-mail para {nome.strip().title()} {sobrenome.strip().title()} √©: {email}")

# Exerc√≠cio 3: Planejador de Viagem
# Objetivo: Praticar a cria√ß√£o e manipula√ß√£o de listas.
#
# Instru√ß√µes:
#
# Crie uma lista chamada destinos_viagem com pelo menos tr√™s cidades que voc√™ gostaria de visitar.
#
# Imprima a lista original.
#
# Voc√™ se decidiu e o primeiro destino da lista ser√° sua pr√≥xima viagem! Remova-o da lista de "desejos" e guarde-o em uma vari√°vel chamada proximo_destino.
#
# Um amigo sugeriu um novo lugar! Adicione um novo destino ao final da sua lista de desejos.
#
# Imprima tr√™s mensagens separadas:
#
# "Meu pr√≥ximo destino √©: [proximo_destino]"
#
# "Ainda desejo visitar: [lista de desejos atualizada]"
#
# "No total, ainda tenho [n√∫mero] destinos na minha lista de desejos."

destinos_viagem = ["Paris", "Nova York", "T√≥quio"]

print("Lista de desejos de viagem:")
print(destinos_viagem)

proximo_destino = destinos_viagem.pop(0)

destinos_viagem.append("Sydney")

print(f"Meu pr√≥ximo destino √©: {proximo_destino}")

print(f"Ainda desejo visitar: {destinos_viagem}")

print(f"No total, ainda tenho {len(destinos_viagem)} destinos na minha lista de desejos.")

# Projeto 4: Jogo de Adivinha√ß√£o de N√∫mero (Vers√£o Melhorada)
# Este √© um projeto cl√°ssico que √© excelente para praticar l√≥gica de loops e condicionais.
#
# Conceitos Principais: M√≥dulos (random), loops while, condicionais (if/elif/else), tratamento de erros (try/except).
#
# MELHORIAS IMPLEMENTADAS:
# - Limite m√°ximo de 10 tentativas
# - Mostra o n√∫mero secreto ao final
# - Op√ß√£o para jogar novamente
# - Mensagens mais amig√°veis
# - Valida√ß√£o robusta de entrada
#
# Descri√ß√£o:
#
# O programa deve "pensar" em um n√∫mero inteiro aleat√≥rio entre 1 e 100. Para isso, voc√™ precisar√° importar e usar o m√≥dulo random do Python.
#
# Dica: Pesquise por random.randint(a, b).
#
# O programa deve rodar em um loop, pedindo ao usu√°rio para adivinhar o n√∫mero.
#
# A cada tentativa do usu√°rio, o programa deve dar uma dica, dizendo se o n√∫mero secreto √© maior ou menor que o palpite.
#
# O loop deve continuar at√© que o usu√°rio acerte o n√∫mero ou atinja o limite de tentativas.
#
# Ao acertar, o programa deve parabenizar o usu√°rio e mostrar quantas tentativas ele levou.
#
# Desafio de Robustez: Use um bloco try/except para garantir que, se o usu√°rio digitar algo que n√£o seja um n√∫mero, o programa exiba uma mensagem de erro amig√°vel e continue o jogo, sem quebrar.

# IMPORT: carrega m√≥dulos externos do Python
# random: m√≥dulo para gerar n√∫meros aleat√≥rios
# (import j√° feito no topo do arquivo)

# FUN√á√ÉO PRINCIPAL DO JOGO
def jogar_adivinhacao():
    """
    Fun√ß√£o que executa uma partida completa do jogo de adivinha√ß√£o.
    Retorna True se o jogador venceu, False se perdeu.
    """
    # RANDOM.RANDINT(): gera um n√∫mero inteiro aleat√≥rio entre os valores especificados
    # Aqui: n√∫mero entre 1 e 100 (inclusive)
    numero_secreto = random.randint(1, 100)

    # VARI√ÅVEL PARA CONTAR TENTATIVAS: come√ßa em 0
    tentativas = 0

    # LIMITE M√ÅXIMO DE TENTATIVAS: evita loop infinito
    max_tentativas = 10

    print("\nüéØ JOGO DE ADIVINHA√á√ÉO!")
    print("Tente adivinhar o n√∫mero secreto entre 1 e 100.")
    print(f"Voc√™ tem {max_tentativas} tentativas!")

    # LOOP WHILE: executa enquanto condi√ß√£o for verdadeira
    # Aqui: enquanto tentativas < max_tentativas
    while tentativas < max_tentativas:
        try:
            # INPUT(): l√™ entrada do usu√°rio como string
            # INT(): converte string para n√∫mero inteiro
            palpite = int(input(f"\nTentativa {tentativas + 1}/{max_tentativas} - Digite seu palpite: "))

            # VALIDA√á√ÉO DE INTERVALO: verifica se palpite est√° entre 1 e 100
            if palpite < 1 or palpite > 100:
                print("‚ùå Erro: Digite um n√∫mero entre 1 e 100!")
                continue  # Volta ao in√≠cio do loop sem contar como tentativa

            # INCREMENTA CONTADOR DE TENTATIVAS
            tentativas += 1

            # CONDICIONAIS IF/ELIF/ELSE: executa c√≥digo baseado em condi√ß√µes
            if palpite == numero_secreto:
                # ACERTOU: mostra mensagem de parab√©ns e retorna True
                print("\nüéâ PARAB√âNS! Voc√™ acertou!")
                print(f"O n√∫mero secreto era: {numero_secreto}")
                print(f"Voc√™ conseguiu em {tentativas} tentativas!")

                # AVALIA√á√ÉO DE PERFORMANCE baseada no n√∫mero de tentativas
                if tentativas <= 3:
                    print("üèÜ Impressionante! Voc√™ √© um mestre!")
                elif tentativas <= 6:
                    print("‚≠ê Muito bom! Excelente desempenho!")
                else:
                    print("‚úÖ Bom trabalho! Voc√™ conseguiu!")

                return True  # Jogador venceu

            elif palpite < numero_secreto:
                # DICA: n√∫mero secreto √© maior
                print("üìà Dica: O n√∫mero secreto √© MAIOR que seu palpite.")
            else:
                # DICA: n√∫mero secreto √© menor
                print("üìâ Dica: O n√∫mero secreto √© MENOR que seu palpite.")

        except ValueError:
            # TRATAMENTO DE ERRO: se usu√°rio digitou algo que n√£o √© n√∫mero
            print("‚ùå Entrada inv√°lida! Digite apenas n√∫meros inteiros.")

    # SE CHEGOU AQUI: jogador atingiu o limite de tentativas
    print("\nüíÄ GAME OVER! Voc√™ n√£o conseguiu adivinhar.")
    print(f"O n√∫mero secreto era: {numero_secreto}")
    print(f"Voc√™ usou todas as {max_tentativas} tentativas dispon√≠veis.")
    return False  # Jogador perdeu

# LOOP PRINCIPAL DO PROGRAMA: permite jogar m√∫ltiplas vezes
while True:
    # CHAMA A FUN√á√ÉO DO JOGO
    venceu = jogar_adivinhacao()

    # PERGUNTA SE QUER JOGAR NOVAMENTE
    while True:
        resposta = input("\nüîÑ Quer jogar novamente? (s/n): ").strip().lower()

        # VALIDA√á√ÉO DE RESPOSTA: aceita m√∫ltiplas formas de "sim" e "n√£o"
        if resposta in ['s', 'sim', 'y', 'yes']:
            print("\n--- NOVA PARTIDA ---")
            break  # Sai do loop interno, continua o loop principal

        elif resposta in ['n', 'n√£o', 'nao', 'no']:
            print("\nüëã Obrigado por jogar! At√© a pr√≥xima!")
            exit()  # Sai do programa completamente

        else:
            # RESPOSTA INV√ÅLIDA: pede novamente
            print("‚ùì Responda com 's' para sim ou 'n' para n√£o.")

# Projeto 5: Gerenciador de Contatos (Introdu√ß√£o a Dicion√°rios)
#
# Este projeto vai te introduzir a uma das estruturas de dados mais poderosas do Python: o dicion√°rio. Diferente da lista, que √© ordenada por √≠ndices num√©ricos, o dicion√°rio usa "chaves" (como uma palavra) para guardar "valores". √â perfeito para um cat√°logo ou agenda.
#
# Conceitos Principais: Dicion√°rios, fun√ß√µes para cada opera√ß√£o, loop principal while com um menu de op√ß√µes.
#
# Descri√ß√£o:
#
# Crie um programa que funcione como uma agenda de contatos, armazenando nome e telefone. A estrutura ideal para isso √© um dicion√°rio, onde o nome do contato √© a chave e o telefone √© o valor.
#
# Dica: Voc√™ pode come√ßar com um dicion√°rio vazio: contatos = {}.
#
# O programa deve exibir um menu de op√ß√µes para o usu√°rio e continuar rodando at√© que o usu√°rio escolha "Sair". O menu deve ser:
#
# *** Agenda de Contatos ***
# 1. Adicionar Contato
# 2. Buscar Contato
# 3. Listar Todos os Contatos
# 4. Remover Contato
# 5. Sair
# Estruture seu c√≥digo com fun√ß√µes! Crie uma fun√ß√£o para cada op√ß√£o do menu (ex: adicionar_contato(agenda), buscar_contato(agenda), etc.), onde agenda √© o dicion√°rio que voc√™ passa como argumento.
#
# Funcionalidades:
#
# Adicionar: Pede um nome e um telefone. Se o nome j√° existir, avise. Sen√£o, adicione ao dicion√°rio.
#
# Buscar: Pede um nome e, se ele existir no dicion√°rio, mostra o telefone. Sen√£o, avisa que n√£o foi encontrado.
#
# Listar: Mostra todos os nomes e telefones da agenda de forma organizada.
#
# Remover: Pede um nome e, se ele existir, o remove do dicion√°rio.
#
# Sair: Encerra o programa.

# ----------------------
# Projeto 5: Agenda de Contatos (melhorada)
# ----------------------
# Explica√ß√£o geral (resumida):
# - Usamos um dicion√°rio para armazenar contatos: chave = nome, valor = telefone.
# - Cada opera√ß√£o (adicionar, buscar, listar, remover) est√° em uma fun√ß√£o separada.
# - Implementamos persist√™ncia b√°sica usando um arquivo JSON (carregar/salvar).
# - Tamb√©m adicionamos valida√ß√£o simples de telefone, busca parcial e listagem ordenada.

AGENDA_PATH = "agenda.json"  # arquivo para salvar/ler os contatos


def carregar_agenda(path: str = AGENDA_PATH) -> dict:
    """Carrega a agenda de um arquivo JSON. Retorna dicion√°rio vazio se n√£o existir.

    Por que usar JSON: √© um formato simples, leg√≠vel e suficiente para um dicion√°rio.
    """
    if not os.path.exists(path):
        return {}
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        # Se houver erro de leitura/decodifica√ß√£o, retornamos agenda vazia
        return {}


def salvar_agenda(agenda: dict, path: str = AGENDA_PATH) -> None:
    """Salva a agenda em disco no formato JSON (substitui o arquivo).

    Chama-se sempre ap√≥s mudan√ßas importantes para manter persist√™ncia.
    """
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(agenda, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("Erro ao salvar a agenda:", e)


def validar_telefone(telefone: str) -> bool:
    """Valida√ß√£o simples de telefone.

    Aceita d√≠gitos, espa√ßos, par√™nteses, tra√ßos e '+' (ex.: +55 (11) 99999-9999).
    Retorna True se passar na regex b√°sica.
    """
    telefone = telefone.strip()
    if not telefone:
        return False
    # Regex: apenas caracteres permitidos
    return re.fullmatch(r"[\d\s\-\(\)\+]+", telefone) is not None


def adicionar_contato(agenda: dict) -> None:
    """Pede nome e telefone, valida e adiciona na agenda.

    - Normaliza nome (title case) e telefone m√≠nimo de valida√ß√£o.
    - Salva a agenda em arquivo ap√≥s adicionar.
    """
    nome = input("Digite o nome do contato: ").strip()
    if not nome:
        print("Nome n√£o pode ser vazio.")
        return
    # Normalizar nome para formato leg√≠vel: cada palavra com inicial mai√∫scula
    nome_norm = " ".join(p.capitalize() for p in nome.split())

    if nome_norm in agenda:
        print(f"‚ùå O contato '{nome_norm}' j√° existe.")
        return

    telefone = input("Digite o telefone do contato: ").strip()
    if not validar_telefone(telefone):
        print("Telefone inv√°lido. Use apenas d√≠gitos, espa√ßos, '()', '-' ou '+'.")
        return

    agenda[nome_norm] = telefone
    salvar_agenda(agenda)
    print(f"‚úÖ Contato '{nome_norm}' adicionado com sucesso! Telefone: {telefone}")


def buscar_contato(agenda: dict) -> None:
    """Busca por nome (aceita correspond√™ncia parcial, case-insensitive).

    Exibe todos os contatos que contenham a substring informada.
    """
    query = input("Digite o nome ou parte do nome para buscar: ").strip()
    if not query:
        print("Busca vazia.")
        return
    query_low = query.lower()
    resultados = [(n, t) for n, t in agenda.items() if query_low in n.lower()]
    if not resultados:
        print("‚ùå Nenhum contato encontrado para a busca informada.")
        return
    print(f"üîé Foram encontrados {len(resultados)} contato(s):")
    for nome, tel in sorted(resultados, key=lambda x: x[0].lower()):
        print(f"- {nome}: {tel}")


def listar_contatos(agenda: dict) -> None:
    """Lista todos os contatos em ordem alfab√©tica por nome.

    Explica√ß√£o: sorted() cria uma ordem previs√≠vel para facilitar leitura.
    """
    if not agenda:
        print("üìã Agenda vazia!")
        return
    print("üìã Lista de Contatos:")
    for nome, telefone in sorted(agenda.items(), key=lambda x: x[0].lower()):
        print(f"{nome}: {telefone}")


def remover_contato(agenda: dict) -> None:
    """Remove um contato. Permite busca parcial para escolher o contato.

    - Se m√∫ltiplos resultados, exibe √≠ndices para o usu√°rio escolher.
    - Confirma√ß√£o antes de remover.
    - Salva a agenda ap√≥s remo√ß√£o.
    """
    query = input("Digite o nome ou parte do nome para remover: ").strip()
    if not query:
        print("Entrada vazia.")
        return
    resultados = [(n, t) for n, t in agenda.items() if query.lower() in n.lower()]
    if not resultados:
        print("‚ùå Nenhum contato encontrado para a busca informada.")
        return

    if len(resultados) == 1:
        nome_escolhido = resultados[0][0]
    else:
        print("Foram encontrados v√°rios contatos:")
        for i, (n, t) in enumerate(resultados, 1):
            print(f"{i}. {n}: {t}")
        try:
            idx = int(input("Escolha o n√∫mero do contato que deseja remover: ").strip())
            if not (1 <= idx <= len(resultados)):
                print("√çndice inv√°lido.")
                return
            nome_escolhido = resultados[idx - 1][0]
        except ValueError:
            print("Entrada inv√°lida.")
            return

    confirma = input(f"Tem certeza que deseja remover '{nome_escolhido}'? (s/n): ").strip().lower()
    if confirma in ("s", "sim"):
        del agenda[nome_escolhido]
        salvar_agenda(agenda)
        print(f"‚úÖ Contato '{nome_escolhido}' removido com sucesso!")
    else:
        print("Remo√ß√£o cancelada.")


def main():
    # Carrega agenda do disco ao iniciar o programa
    agenda = carregar_agenda()
    while True:
        print("*** Agenda de Contatos ***\n1. Adicionar Contato\n2. Buscar Contato\n3. Listar Todos os Contatos\n4. Remover Contato\n5. Sair")
        opcao = input("Escolha uma op√ß√£o: ").strip()

        if opcao == "1":
            adicionar_contato(agenda)
        elif opcao == "2":
            buscar_contato(agenda)
        elif opcao == "3":
            listar_contatos(agenda)
        elif opcao == "4":
            remover_contato(agenda)
        elif opcao == "5":
            # Salva antes de sair (garantia adicional)
            salvar_agenda(agenda)
            print("üëã Saindo... Agenda salva.")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")


if __name__ == "__main__":
    main()